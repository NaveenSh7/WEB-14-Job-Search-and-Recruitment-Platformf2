const CONFIG = require('./config');
const { addLog } = require('./queue');
const https = require('https');

let cachedPublicIP = null;
let isFetchingIP = false;

function fetchPublicIP(callback) {
  if (cachedPublicIP) return callback(cachedPublicIP);
  if (isFetchingIP) return callback('fetching'); // avoid duplicate fetches

  isFetchingIP = true;
  https.get('https://api.ipify.org?format=json', (res) => {
    let data = '';
    res.on('data', chunk => data += chunk);
    res.on('end', () => {
      try {
        cachedPublicIP = JSON.parse(data).ip;
        isFetchingIP = false;
        callback(cachedPublicIP);
      } catch (err) {
        console.error('Failed to parse IP:', err);
        isFetchingIP = false;
        callback(null);
      }
    });
  }).on('error', (err) => {
    console.error('Failed to fetch public IP:', err);
    isFetchingIP = false;
    callback(null);
  });
}

function resetPublicIPCache() {
  cachedPublicIP = null;
  isFetchingIP = false;
}

function init({ secret }) {
  CONFIG.secret = secret;
  // No need to fetch IP here
}

function middleware() {
  return (req, res, next) => {
    const timestamp = Date.now();

    res.on('finish', () => {
      const pushLog = (ip) => {
        const log = {
          method: req.method,
          endpoint: req.originalUrl,
          statusCode: res.statusCode,
          userAgent: req.headers['user-agent'],
          timestamp,
          serverIP: ip || 'unknown',
        };
        addLog(log);
      };

      if (cachedPublicIP) {
        pushLog(cachedPublicIP);
      } else {
        fetchPublicIP((ip) => pushLog(ip));
      }
    });

    next();
  };
}

module.exports = {
  init,
  middleware,
  resetPublicIPCache, // <- export this so queue can call it
};
